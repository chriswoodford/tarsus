// Generated by CoffeeScript 1.6.1
(function() {
  var Tarsus,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tarsus = function(Backbone) {
    "use strict";    Tarsus = {};
    if (typeof exports !== "undefined" && exports !== null) {
      Tarsus = exports;
    }
    Tarsus.VERSION = "0.0.1";
    Tarsus.Views = {};
    Tarsus.Views.Bootstrap = {};
    return Tarsus;
  };

  Tarsus(Backbone);

  Tarsus.Views.Bootstrap.Accordion = (function(_super) {

    __extends(Accordion, _super);

    function Accordion() {
      return Accordion.__super__.constructor.apply(this, arguments);
    }

    return Accordion;

  })(Backbone.View);

  Tarsus.Views.Bootstrap.Alert = (function(_super) {

    __extends(Alert, _super);

    function Alert() {
      return Alert.__super__.constructor.apply(this, arguments);
    }

    Alert.prototype.tagName = 'div';

    Alert.prototype.className = 'alert';

    Alert.prototype.defaults = {
      fadeIn: true
    };

    Alert.prototype.events = {
      'close': 'close',
      'closed': 'closed'
    };

    Alert.prototype.initialize = function(options) {
      _.bindAll(this);
      return this.options = _.extend(this.defaults, options);
    };

    Alert.prototype.render = function() {
      if (this.options.fadeIn) {
        this.$el.addClass('fade in');
      }
      if (this.options.status != null) {
        this.$el.addClass('alert-' + this.options.status);
      }
      this.$el.append(this.closeButton());
      if (this.options.title != null) {
        this.$el.append(this.header());
      }
      if (typeof template !== "undefined" && template !== null) {
        this.$el.addClass('alert-block');
        this.$el.append(this.template());
      } else {
        this.$el.append(this.options.text);
      }
      this.$el.alert();
      return this;
    };

    Alert.prototype.close = function() {
      this.trigger('tarsus:alert:close');
      return this;
    };

    Alert.prototype.closed = function() {
      this.trigger('tarsus:alert:closed');
      return this;
    };

    Alert.prototype.success = function() {
      this.options.status = 'success';
      return this;
    };

    Alert.prototype.info = function() {
      this.options.status = 'info';
      return this;
    };

    Alert.prototype.error = function() {
      this.options.status = 'error';
      return this;
    };

    Alert.prototype.closeButton = function() {
      return Backbone.$('<button type="button" class="close" data-dismiss="alert">&times;</button>');
    };

    Alert.prototype.headerContainer = function() {
      return Backbone.$('<h4 class="alert-heading"></h4>');
    };

    Alert.prototype.header = function() {
      return this.headerContainer.append(this.options.title);
    };

    return Alert;

  })(Backbone.View);

  Tarsus.Views.Bootstrap.Carousel = (function(_super) {

    __extends(Carousel, _super);

    function Carousel() {
      return Carousel.__super__.constructor.apply(this, arguments);
    }

    return Carousel;

  })(Backbone.View);

  Tarsus.Views.Bootstrap.Dropdown = (function(_super) {

    __extends(Dropdown, _super);

    function Dropdown() {
      return Dropdown.__super__.constructor.apply(this, arguments);
    }

    return Dropdown;

  })(Backbone.View);

  Tarsus.Views.Bootstrap.Modal = (function(_super) {

    __extends(Modal, _super);

    function Modal() {
      return Modal.__super__.constructor.apply(this, arguments);
    }

    Modal.prototype.tagName = 'div';

    Modal.prototype.className = 'modal hide fade';

    Modal.prototype.attributes = {
      tabindex: -1,
      style: 'outline: 0;'
    };

    Modal.prototype.events = {
      'shown': 'shown',
      'hidden': 'hidden'
    };

    Modal.prototype.defaults = {
      bootstrap: {
        backdrop: true,
        keyboard: true,
        show: false,
        remote: false
      },
      noCloseButton: false
    };

    Modal.prototype.initialize = function(options) {
      _.bindAll(this);
      return this.options = _.extend(this.defaults, options);
    };

    Modal.prototype.render = function() {
      var body, footer, footerContainer, header, headerContainer, model;
      if (this.model === Backbone.Model) {
        model = this.model.attributes;
      }
      header = this.header();
      footer = this.footer();
      body = Backbone.$('<div class="modal-body"></div>');
      body.append(this.template(model));
      if (header != null) {
        headerContainer = this.headerContainer();
        if (!this.options.noCloseButton) {
          headerContainer.append(this.closeButton());
        }
        headerContainer.append(header);
        this.$el.append(headerContainer);
      }
      this.$el.append(body);
      if (footer != null) {
        footerContainer = this.footerContainer();
        footerContainer.append(footer);
        this.$el.append(footerContainer);
      }
      this.$el.modal(this.options.bootstrap);
      return this;
    };

    Modal.prototype.show = function() {
      this.$el.modal('show');
      this.trigger('tarsus:modal:show');
      return this;
    };

    Modal.prototype.shown = function() {};

    Modal.prototype.hide = function() {
      this.$el.modal('hide');
      this.trigger('tarsus:modal:hide');
      return this;
    };

    Modal.prototype.hidden = function() {};

    Modal.prototype.toggle = function() {
      this.$el.modal('toggle');
      this.trigger('tarsus:modal:toggle');
      return this;
    };

    Modal.prototype.headerContainer = function() {
      return Backbone.$('<div class="modal-header"></div>');
    };

    Modal.prototype.header = function() {
      if (this.options.title != null) {
        return Backbone.$('<h3>' + this.options.title + '</h3>');
      }
    };

    Modal.prototype.closeButton = function() {
      return Backbone.$('<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>');
    };

    Modal.prototype.footerContainer = function() {
      return Backbone.$('<div class="modal-footer"></div>');
    };

    Modal.prototype.footer = function() {};

    return Modal;

  })(Backbone.View);

  Tarsus.Views.Bootstrap.Popover = (function(_super) {

    __extends(Popover, _super);

    function Popover() {
      return Popover.__super__.constructor.apply(this, arguments);
    }

    Popover.prototype.tagName = 'a';

    Popover.prototype.className = 'btn';

    Popover.prototype.attributes = {
      href: '#'
    };

    Popover.prototype.defaults = {
      bootstrap: {
        animation: true,
        html: false,
        placement: 'top',
        selector: false,
        trigger: 'hover focus',
        delay: 0,
        container: false,
        title: null,
        content: null
      },
      text: null
    };

    Popover.prototype.initialize = function(options) {
      _.bindAll(this);
      return this.options = _.extend(this.defaults, options);
    };

    Popover.prototype.render = function() {
      this.$el.text(this.options.text);
      this.$el.popover(this.options.bootstrap);
      return this;
    };

    Popover.prototype.show = function() {
      this.$el.popover('show');
      this.trigger('tarsus:popover:show');
      return this;
    };

    Popover.prototype.hide = function() {
      this.$el.popover('hide');
      this.trigger('tarsus:popover:hide');
      return this;
    };

    Popover.prototype.toggle = function() {
      this.$el.popover('toggle');
      this.trigger('tarsus:popover:toggle');
      return this;
    };

    Popover.prototype.destroy = function() {
      this.$el.popover('destroy');
      this.trigger('tarsus:popover:destroy');
      return this;
    };

    return Popover;

  })(Backbone.View);

  Tarsus.Views.Bootstrap.Tabs = (function(_super) {

    __extends(Tabs, _super);

    function Tabs() {
      return Tabs.__super__.constructor.apply(this, arguments);
    }

    return Tabs;

  })(Backbone.View);

  Tarsus.Views.Bootstrap.Tooltip = (function(_super) {

    __extends(Tooltip, _super);

    function Tooltip() {
      return Tooltip.__super__.constructor.apply(this, arguments);
    }

    Tooltip.prototype.tagName = 'a';

    Tooltip.prototype.attributes = {
      href: '#'
    };

    Tooltip.prototype.defaults = {
      bootstrap: {
        animation: true,
        html: false,
        placement: 'top',
        selector: false,
        title: '',
        trigger: 'hover focus',
        delay: 0,
        container: false
      },
      text: null
    };

    Tooltip.prototype.initialize = function(options) {
      _.bindAll(this);
      return this.options = _.extend(this.defaults, options);
    };

    Tooltip.prototype.render = function() {
      this.$el.text(this.options.text);
      this.$el.tooltip(this.options.bootstrap);
      return this;
    };

    Tooltip.prototype.show = function() {
      this.$el.tooltip('show');
      this.trigger('tarsus:tooltip:show');
      return this;
    };

    Tooltip.prototype.hide = function() {
      this.$el.tooltip('hide');
      this.trigger('tarsus:tooltip:hide');
      return this;
    };

    Tooltip.prototype.toggle = function() {
      this.$el.tooltip('toggle');
      this.trigger('tarsus:tooltip:toggle');
      return this;
    };

    Tooltip.prototype.destroy = function() {
      this.$el.tooltip('destroy');
      this.trigger('tarsus:tooltip:destroy');
      return this;
    };

    return Tooltip;

  })(Backbone.View);

}).call(this);
